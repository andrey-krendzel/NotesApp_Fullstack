{"version":3,"sources":["components/Note.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","notesToShow","filter","useEffect","noteService","then","response","data","map","find","n","changedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","console","log","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oLAUiBA,EATJ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBACzB,OACE,+BAAKH,EAAKI,QACV,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCLpCI,EAAU,kCAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,IAcb,EAVA,SAAAG,GAEb,OADgBF,IAAMG,KAAKJ,EAASG,IASvB,EALA,SAACE,EAAIF,GAElB,OADgBF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,IC2EjCI,EApFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAC5B,iBAHc,mBAETG,EAFS,KAEAC,EAFA,OAKcJ,oBAAS,GALvB,mBAKTK,EALS,KAKAC,EALA,KAOVC,EAAcF,EAClBJ,EACAA,EAAMO,QAAO,SAAAtB,GAAI,OAAuB,IAAnBA,EAAKG,aAE5BoB,qBAAU,WACRC,IAEGC,MAAK,SAAAC,GACJV,EAASU,EAASC,WAErB,IA8CH,OACE,gCACE,uCACA,8BACE,yBAAQtB,QAAS,kBAAMe,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACCE,EAAYO,KAAI,SAAA5B,GAAI,OACjB,cAAC,EAAD,CAAoBA,KAAMA,EAAOC,iBAAkB,kBArDhC,SAACU,GACjB,sCAAkCA,GAA3C,IACMX,EAAOe,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAChCoB,EAAW,2BAAQ/B,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqB,EACQb,EAAIoB,GAAaN,MAAK,SAAAC,GAC5BV,EAASD,EAAMa,KAAI,SAAA5B,GAAI,OAAIA,EAAKW,KAAOA,EAAKX,EAAO+B,SAEpDC,OAAM,SAAAC,GACLC,MAAM,cAAD,OACWlC,EAAKI,QADhB,uCAGLY,EAASD,EAAMO,QAAO,SAAAQ,GAAC,OAAIA,EAAEnB,KAAOA,SAwCyBwB,CAAmBnC,EAAKW,MAAtEX,EAAKW,SAGpB,uBAAMyB,SApCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnC,QAASa,EACTuB,MAAM,IAAIC,MAAOC,cACjBvC,UAAWwC,KAAKC,SAAW,IAG7BpB,EACQe,GACPd,MAAK,SAAAC,GACJV,EAASD,EAAM8B,OAAOnB,EAASC,OAC/BT,EAAW,OAGb4B,QAAQC,IAAIhC,IAqBV,UACE,uBAAOiC,MAAO/B,EAASgC,SAnBJ,SAACZ,GACxBS,QAAQC,IAAIV,EAAMa,OAAOF,OACzB9B,EAAWmB,EAAMa,OAAOF,UAkBpB,wBAAQG,KAAK,SAAb,yBCvEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAIjDX,M","file":"static/js/main.d7e8e4f9.chunk.js","sourcesContent":["import React from 'react'\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n    return (\n      <li>{note.content}\n      <button onClick={toggleImportance}>{label}</button></li>\n    )\n  }\n  \n  export default Note","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  ) \n  const [showAll, setShowAll] = useState(true)\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important === true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data)\n      })\n  }, [])\n\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n    .update(id, changedNote).then(response => {\n      setNotes(notes.map(note => note.id !== id ? note : changedNote))\n    })\n    .catch(error => {\n      alert(\n        `the notes '${note.content}' importance was already changed. `\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n \n  \n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n  \n    noteService\n    .create(noteObject)\n    .then(response => {\n      setNotes(notes.concat(response.data))\n      setNewNote('')\n    })\n\n    console.log(notes)\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n      {notesToShow.map(note =>\n          <Note key={note.id} note={note}  toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}